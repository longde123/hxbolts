{
  "name": "hxbolts",
  "tagline": "Deal with async tasks like a boss",
  "body": "![Logo](//restorer.github.io/hxbolts/images/hxbolts-logo.png)\r\n\r\nhxbolts is a port of a \"tasks\" component from java library named Bolts.\r\nA task is kind of like a JavaScript Promise, but with different API.\r\n\r\nWhile original java library is about keeping long-running operations out of the UI thread,\r\ncurrent version of hxbolts is more about transforming async callback hell into nice looking code.\r\n\r\n## Installation\r\n\r\n```\r\nhaxelib install hxbolts\r\n```\r\n\r\n## Let's talk\r\n\r\nImagine you have to delete all comments from blog while player playing in your game, mwahahaha ðŸ˜ˆ . But server API has only 4 methods:\r\n\r\n1. Authorize;\r\n2. Get all posts ids;\r\n3. Get all comments ids for specific post;\r\n4. Delete specific comment by id.\r\n\r\nLet you have a function for making async requests:\r\n\r\n```haxe\r\nprivate static function makeRequestAsync(\r\n    url : String,\r\n    callback : String -> Void\r\n) : Void { ... }\r\n```\r\n\r\nUsually code will look like:\r\n\r\n```haxe\r\nvar token : String = null;\r\n\r\nmakeRequestAsync(\"http://blog.tld/api/authorize?user=me\", function(result : String) : Void {\r\n    try {\r\n        token = Reflect.field(Json.parse(result), \"token\");\r\n    } catch (e : Dynamic) {\r\n        trace(\"Error occurred : \" + Std.string(e));\r\n        return;\r\n    }\r\n\r\n    makeRequestAsync('http://blog.tld/api/postsIds?token=${token}', function(result : String) : Void {\r\n        var ids : Array<Int>;\r\n\r\n        try {\r\n            ids = cast Json.parse(result);\r\n        } catch (e : Dynamic) {\r\n            trace(\"Error occurred : \" + Std.string(e));\r\n            return;\r\n        }\r\n\r\n        var results = new Array<String>();\r\n\r\n        for (id in ids) {\r\n            makeRequestAsync('http://blog.tld/api/commentsIds?token=${token}&postId=${id}', function(result : String) : Void {\r\n                results.push(result);\r\n\r\n                if (results.length == ids.length) {\r\n                    // ...\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n```\r\n\r\nUh oh... And I donâ€™t even started deletion process.\r\n\r\n## hxbolts coming to the rescue!\r\n\r\nAt first we need to *boltify* makeRequestAsync function:\r\n\r\n```haxe\r\nprivate static function makeRequestTask(url : String) : Task<String> {\r\n    var tcs = new TaskCompletionSource<String>();\r\n\r\n    makeRequestAsync(url, function(result : String) : Void {\r\n        tcs.setResult(result);\r\n    });\r\n\r\n    return tcs.task;\r\n}\r\n```\r\n\r\nThe rest is easy:\r\n\r\n```haxe\r\nvar token : String = null;\r\n\r\nmakeRequestTask(\"http://blog.tld/api/authorize?user=me\").onSuccessTask(function(task : Task<String>) : Task<String> {\r\n    token = Reflect.field(Json.parse(task.result), \"token\");\r\n    return makeRequestTask('http://blog.tld/api/postsIds?token=${token}');\r\n}).onSuccessTask(function(task : Task<String>) : Task<Array<String>> {\r\n    var tasks = new Array<Task<String>>();\r\n\r\n    for (id in (cast Json.parse(task.result) : Array<Int>)) {\r\n        tasks.push(makeRequestTask('http://blog.tld/api/commentsIds?token=${token}&postId=${id}'));\r\n    }\r\n\r\n    return Task.whenAllResult(tasks);\r\n}).onSuccessTask(function(task : Task<Array<String>>) : Task<Nothing> {\r\n    var tasks = new Array<Task<String>>();\r\n\r\n    for (response in task.result) {\r\n        for (id in (cast Json.parse(response) : Array<Int>)) {\r\n            tasks.push(makeRequestTask('http://blog.tld/api/deleteComment?token=${token}&commentId=${id}'));\r\n        }\r\n    }\r\n\r\n    return Task.whenAll(tasks);\r\n}).continueWith(function(task : Task<Nothing>) : Nothing {\r\n    if (task.isSuccessed) {\r\n        trace(\"Everything is good\");\r\n    } else {\r\n        trace(\"Error occurred : \" + Std.string(task.error));\r\n    }\r\n\r\n    return null;\r\n});\r\n```\r\n\r\nCode is linear, easy to understand. It even doesnâ€™t contains try / catch blocks, because hxbolts will take care about exceptions.\r\n\r\nCheck out more examples at [hxbolts repo](https://github.com/restorer/hxbolts).",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}